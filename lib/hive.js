// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = (function() {
  var Bee, EventEmitter, Hive, exec, nextTick, validateSignal, validateTag;
  exec = require('child_process').exec;
  EventEmitter = require('events').EventEmitter;
  nextTick = process.nextTick;
  Bee = require('./bee');
  validateTag = function(tag) {
    if (typeof tag !== 'string') {
      throw new Error('tag argument missing or not a string');
    }
  };
  validateSignal = function(signal) {
    if (!(typeof signal === 'string' || !signal)) {
      throw new Error('signal argument not a string');
    }
  };
  return Hive = (function(_super) {

    __extends(Hive, _super);

    function Hive() {
      this.killall = __bind(this.killall, this);

      this.kill = __bind(this.kill, this);

      this.remove = __bind(this.remove, this);

      this.all = __bind(this.all, this);

      this.tags = __bind(this.tags, this);

      this.get = __bind(this.get, this);

      this.launch = __bind(this.launch, this);
      Hive.__super__.constructor.call(this);
      this.processes = Object.create(null);
    }

    Hive.prototype.launch = function(tag, cmd, cb) {
      var child,
        _this = this;
      if (!cb) {
        if (!cmd) {
          cmd = tag;
          cb = function() {};
        } else if (typeof cmd === 'function') {
          cb = cmd;
          cmd = tag;
        } else {
          cb = function() {};
        }
      }
      if (typeof cmd !== 'string') {
        throw new Error('cmd argument missing or not a string');
      }
      if (typeof cb !== 'function') {
        throw new Error('callback argument missing or not a function');
      }
      validateTag(tag);
      this.processes[tag] = child = new Bee(exec(cmd));
      return nextTick(function() {
        cb();
        return _this.emit('launch', tag, cmd);
      });
    };

    Hive.prototype.get = function(tag) {
      validateTag(tag);
      return this.processes[tag] || null;
    };

    Hive.prototype.tags = function() {
      var tag;
      return (function() {
        var _results;
        _results = [];
        for (tag in this.processes) {
          _results.push(tag);
        }
        return _results;
      }).call(this);
    };

    Hive.prototype.all = function() {
      var proc, tag;
      return (function() {
        var _ref, _results;
        _ref = this.processes;
        _results = [];
        for (tag in _ref) {
          proc = _ref[tag];
          _results.push(proc);
        }
        return _results;
      }).call(this);
    };

    Hive.prototype.remove = function(tag) {
      validateTag(tag);
      return delete this.processes[tag];
    };

    Hive.prototype.kill = function(tag, signal) {
      var proc;
      validateTag(tag);
      validateSignal(signal);
      proc = this.processes[tag];
      return proc.kill(signal);
    };

    Hive.prototype.killall = function(signal) {
      var proc, tag, _ref, _results;
      validateSignal(signal);
      _ref = this.processes;
      _results = [];
      for (tag in _ref) {
        proc = _ref[tag];
        _results.push(proc.kill(signal));
      }
      return _results;
    };

    return Hive;

  })(EventEmitter);
})();
